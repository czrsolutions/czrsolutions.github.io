<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on CZR Solutions</title>
    <link>/czrsolutions.github.io/categories/programming/index.xml</link>
    <description>Recent content in Programming on CZR Solutions</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <atom:link href="/czrsolutions.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A experiência de construir um app usando React Native</title>
      <link>/czrsolutions.github.io/blog/2017/05/03/experiencia-com-app-react-native</link>
      <pubDate>Wed, 03 May 2017 13:47:08 +0200</pubDate>
      
      <guid>/czrsolutions.github.io/blog/2017/05/03/experiencia-com-app-react-native</guid>
      <description>

&lt;p&gt;O React Native é um projeto que foi desenvolvido pelos engenheiros do Facebook e
tem como lema &amp;ldquo;learn once, write anywhere&amp;rdquo;, ou seja, é uma ferramenta que permite
o desenvolvimento de aplicativos nativos (Android e iOS) utilizando uma só linguagem.&lt;/p&gt;

&lt;p&gt;Diferente dos frameworks para construir aplicativos híbridos (ex. Cordova), o React
Native, apesar de permitir o reuso do mesmo codebase para plataformas diferentes, não
se propõe ao &amp;ldquo;write once, run everywhere&amp;rdquo; pois cada plataforma possui características
que devem ser respeitadas.&lt;/p&gt;

&lt;h2 id=&#34;as-vantagens-do-react-native&#34;&gt;As vantagens do React Native&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. É Nativo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O React Native roda em uma thread JavaScript que se comunica com componentes nativos
 em tempo de execução, portanto os aplicativos desenvolvidos com esse framework
 apresentam uma excelente performance no Android e iOS e passam a sensação de nativos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Desenvolvimento Eficiente&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As alterações que você realizar no código serão visualizadas imediatamente. Isso significa
que não haverá mais espera até que seu código compile e seu aplicativo reinicie após cada
mudança que você realize!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Fácil de Aprender&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se você já é familiarizado(a) com JavaScript, a curva de aprendizado será muito menor.
Além disso, a documentação na internet é vasta e muito provavelmente você encontrará as
soluções para os problemas que vier a enfrentar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Comunidade Ativa&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como grande parte do código do seu aplicativo em React Native será em JavaScript, você
poderá desfrutar de diversos tutoriais, documentações e exemplos disponibilizados pela comunidade.&lt;/p&gt;

&lt;h2 id=&#34;a-minha-experiência-com-react-native&#34;&gt;A minha experiência com React Native&lt;/h2&gt;

&lt;p&gt;Até eu começar a usar o React Native, ainda não havia tido a oportunidade de fazer um aplicativo.
Além disso, meu background era de backend Web e eu não possuia muita experiência com JavaScript ou
qualquer um de seus frameworks. Sendo assim, não vou comparar o React Native com outras tecnologias, mas
vou passar as impressões que ficaram.&lt;/p&gt;

&lt;p&gt;Primeiramente, o React Native, assim como o React, possui uma maneira particular de trabalhar com o estado
da aplicação e eu levei algum tempo para me adaptar a isso. O framework trabalha com componentes
declarativos, ou seja, com a definição de como uma tela deve parecer dado um determinado estado.
O controle dos estados é realizado através dos tipos de dado &amp;ldquo;state&amp;rdquo; e &amp;ldquo;props&amp;rdquo; e o próprio React Native
verifica as alterações desses tipos de dados e rerenderiza os componentes de maneira muito eficiente.&lt;/p&gt;

&lt;p&gt;O &amp;ldquo;state&amp;rdquo; armazena os dados que se alteram durante o lifetime de um componente, já o &amp;ldquo;props&amp;rdquo; tem seu valor
 atribuido pelo componente pai e não muda durante o lifetime. Sendo assim, o &amp;ldquo;state&amp;rdquo;
  deve ser inicializado no construtor e sempre que for alterá-lo,
você deve utilizar o &amp;ldquo;setState&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React, { Component } from &#39;react&#39;;
import { AppRegistry, Text, View } from &#39;react-native&#39;;

//Componente que pisca
class TextoQuePisca extends Component {
  constructor(props) {
    super(props);
    this.state = {mostraTexto: true};

    // Alterna &amp;quot;mostraTexto&amp;quot; a cada segundo
    setInterval(() =&amp;gt; {
      this.setState({ mostraTexto: !this.state.mostraTexto });
    }, 1000);
  }

  render() {
    let display = this.state.mostraTexto ? this.props.texto : &#39; &#39;;
    return (
      &amp;lt;Text&amp;gt;{display}&amp;lt;/Text&amp;gt;
    );
  }
}

class MeuApp extends Component {
  render() {
    return (
      &amp;lt;View&amp;gt;
        &amp;lt;TextoQuePisca texto=&#39;Esse texto pisca&#39; /&amp;gt;
        &amp;lt;TextoQuePisca texto=&#39;e esse também&#39; /&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }
}

AppRegistry.registerComponent(&#39;MeuApp&#39;, () =&amp;gt; MeuApp);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note que toda vez que o &amp;ldquo;setState&amp;rdquo; for chamado e houver alterações no estado, o componente é renderizado novamente.
Você jamais utilizará o &amp;ldquo;setState&amp;rdquo; dentro da função de renderização de um componente.
Em uma aplicação de verdade, por exemplo, ele será chamado cada vez que um dado novo chegar ou com inputs de usuário.&lt;/p&gt;

&lt;p&gt;Uma opção que fiz, e é conhecida como boa prática, foi utilizar funções no lugar de classes sempre que não era necessário
controlar o estado do componente (prática conhecida por &amp;ldquo;stateless functional component&amp;rdquo;). Isso tornou o app mais modular e fácil de ser testado.
Um exemplo dessa prática seria:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React, { Component } from &#39;react&#39;;
import { AppRegistry, Text, View } from &#39;react-native&#39;;

//Componente funcional
const Exemplo = props =&amp;gt; {
  return(
    &amp;lt;Text&amp;gt;
        {props.texto}
    &amp;lt;/Text&amp;gt;
  )
}

class MeuApp extends Component {
  render() {
    return (
      &amp;lt;View&amp;gt;
        &amp;lt;Exemplo texto = &#39;Exemplo de componente funcional.&#39;/&amp;gt;
      &amp;lt;/View&amp;gt;
    );
  }
}

AppRegistry.registerComponent(&#39;MeuApp&#39;, () =&amp;gt; MeuApp);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A aplicação que desenvolvi utilizando React Native possuia 5 telas simples, portanto não exigia a utilização de
bibliotecas como Redux para o gerenciamento do estado. Além disso, como já estava aprendendo uma nova tecnologia,
tive receio de gerar um overhead incluindo o Redux.&lt;/p&gt;

&lt;p&gt;Tendo o conceito do estado bem entendido, o restante do desenvolvimento foi mais tranquilo. Consegui terminar o
aplicativo e colocá-lo na playstore em uma semana e acredito que isso tenha sido impulsionado pelo &amp;ldquo;Hot Reloading&amp;rdquo; que a ferramenta oferece.&lt;/p&gt;

&lt;p&gt;Desenhar as telas e testar o que estava sendo desenvolvido foi muito eficiente, pois basta salvar as alterações
do código que o aplicativo é instantaneamente recarregado. Além disso, por ter uma comunidade muito ativa, não
foi um problema encontrar documentações ou bibliotecas para tudo que precisei.&lt;/p&gt;

&lt;p&gt;Como dito anteriormente, o aplicativo foi desenvolvido apenas para Android, entretanto caso seja
necessário distribuí-lo também para o iOS, não será um problema, visto que  mais de 80% do código
pode ser utilizado para as duas plataformas.&lt;/p&gt;

&lt;p&gt;E então, o que ficou? Como não tenho como comparar o React Native com outros frameworks, a sensação que
fica é a de que ele é uma ferramenta muito potente que veio para melhorar a experiência do desenvolvedor
e também do usuário final. O framework respeita o ecossistema nativo de cada plataforma, mas sem perder a
possibilidade de escrever trechos de código que funcionem para todas, e isso é sensacional para o gerenciamento
do projeto visto que não é necessário manter mais de uma equipe para a entrega de aplicativos que pareçam nativos
em mais de uma plataforma.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>